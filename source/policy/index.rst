Token issuance permissions
==========================

Ipso

Policy lists and transaction control
====================================

A core functionality of the Ocean platform is the ability of the blockchain/sidechain operators (the asset issuers) to control and restrict the user transaction permisions, while token outputs remain *owned* (via the control of private keys) by the legal holder. This control can determine:

- Which user addresses (public keys) tokens can be paid to (the *whitelist*)
- Which user addresses tokens can be spent from (the *freezelist*)
- Which user addresses have permission to permanently destroy (burn) tokens (the *burnlist*)

These three *policy lists* then restrict which transactions that are generated and submitted by individual users can be added to new blocks generated by the federation signing nodes, and therefore be allowed to transfer ownership of a token value peer-to-peer. 

.. image:: policy-flow.png
    :width: 340px
    :alt: Mempool policy flow
    :align: center

The policy lists are used by the federation nodes to determine which transactions are added to the *mempool*, and therefore in-turn added to new blocks. The restrictions are applied as follows:

1. The transaction is checked for any *spendable* outputs (i.e. P2PKH or P2SH). If *all* spendable output addresses are contained in the address whitelist, the transaction is accepted, if not it is rejected. 
2. Each of the transaction inputs are checked - if *any* of the transaction input addresses are on the address freezelist, the transactions is rejected. 
3. If any of the transactions outputs burn token value (i.e. send tokens to an ``OP_RETURN`` output) then *all* of the input addresses must be on the address burnlist. 

Policy transactions
********************

The three policy lists (whitelist, freezelist and burnlist) are kept in the client memory for fast lookup, and are activated and applied as mempool policy if the configuration options ``-whitelist=1``, ``freezelist=1`` and ``-burnlist=1`` are set. The addresses in each policy list can be added, removed or queried via the client RPC interface. In addition, to enable scalable and modular deployment of federated nodes, the policy lists can also be controlled (i.e. addresses added and removed) via on-chain transactions: *policy transactions*. This enables addresses to be added and removed from the policy lists by remote agents outside of the federated signing nodes without any external connections except for the peer-to-peer protocol. 

In this process, a special policy transaction containing an address to be added to a policy list is sent to the network (by an authorised wallet) and included in a block. Once confirmed, the address encoded in the policy transaction is added to the policy list by the signing node clients, and it is then enforced. A second policy transaction spending this previous output is then be used to remove the address from the list. 

.. image:: policy-blocks.png
    :width: 320px
    :alt: Policy transactions
    :align: center

Policy tokens
*************

Permission to modify the policy lists via policy transactions is controlled via *policy tokens*. Policy tokens for the modification of each policy list are created in the genesis block under the control of a specified ``scriptPubKey``. These are specified in the configuration as ``whitelistcoinsdestination``, ``freezelistcoinsdestination`` and ``burnlistcoinsdestination`` respectively. 

The wallets that control the private keys to these policy tokens then have the ability to modify the corresponding policy lists via policy transactions from outside of the federation signing nodes. These wallets to be integrated directly with a KYC/ID service provider for onboarding new users of a blockchain/sidechain or controlled manually by agents or staff of the asset issuer. 

.. image:: policy-user.png
    :width: 360px
    :alt: Policy tokens and wallet
    :align: center


User onboarding
================================

A protocol is incorporated that streamlines the user onboarding process, and allows users to self-register of validated whitelist addresses in a way that preserves user privacy. 

Preliminaries
^^^^^^^^^^^^^

The asset issuer creates a deterministic "wallet" key pairs ``pub_c`` and ``priv_c`` and publishes the master public key to the genesis block.

Onboarding
^^^^^^^^^^

1 - The user randomly selects a ``pub_c`` using the master public key published in the genesis block (see preliminaries above). This will serve as their unique user ID.
2 - The user sends an encrypted (with ``pub_c``) address ``addr_e`` to the KYC vendor together with their ``pub_c``.
3 - The KYC vendor forwards the result of the checks together with addr_e and pub_c to a webhook.\ :raw-html-m2r:`<br>`
4 - If the user passed the KYC/AML checks then ``pub_c`` is recorded in the blockchain together with ``addr_e`` in a ``OP_REGISTERID`` transaction. This operation should is restricted and managed using the whitelist policy permission token. 

The signing nodes will build a map in RAM of ``pub_c:addr`` for convenience and speed.

User address self-registration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Submission
~~~~~~~~~~

1 - The user submits a transaction that includes the following information:  


* ``addr_e``, ecrypted with ``pub_c``  
* The operation code (``OP_REGISTERADDRESS``)  

Processing
~~~~~~~~~~

1 - The signing node looks up the ``pub_c`` from the ``addr:pub_c`` map using the transactions input address (users will request new addresses using existing addresses).
2 - If the ``pub_c`` is already whitelisted, the node decrypts ``addr_e``, adds it to the whitelist and updates the ``pub_c:addr`` map.  

Node restart
^^^^^^^^^^^^

In case of node restart, the whitelist is rebuilt from the blockchain.

Privacy
^^^^^^^

Access to the master key is required in order to link users to addresses. 

Auditing
^^^^^^^^

Each user has their own pub/priv pair, so one user's addresses can be revealed if required by revealing their ``priv_c``, without revealing any other user's addresses.

Advantages
-----------

* Users only register the additional addresses they need, and pay a small price for the privilege via a transaction fee. This avoids bloating the whitelist records unneccessarily, and enables user to register as many new addresses as they require.
* Whitelist address registration is recorded immutably on the blockchain. 
* Registering new addresses is done independently by the user (features should be added to the wallet GUI to assist with this process).
* Contact hash can be registered on a per-user basis if desired, offering greater flexibility.
* ID keys and links to their associated addresses are kept of the blockchain but can be audited if necessary.


OP codes
~~~~~~~~


* OP_REGISTERADDRESS  
* OP_REGISTERID
* OP_REGISTERIDPUBKEY
